using System;
using System.IO;

namespace LongestIncreasingSubsequence
{
    class Program
    {
        // бинарный поиск
        static int GetCeilIndex(int[] arr, int[] T, int l, int r, int key)
        {
            while (r - l > 1)
            {
                int m = l + (r - l) / 2;

                if (arr[T[m]] >= key)
                    r = m;
                else
                    l = m;
            }
            return r;
        }

        // поиск наибольшей возрастающей подпоследовательности
        static int LongestIncreasingSubsequence(int[] arr, int n)
        {
            // создаём массив, в котором мы будем хранить индексы элементов искомой подпоследовательности,
            // инициализированный с 0
            int[] tailIndices = new int[n];
            for (int i = 0; i < n; i++)
                tailIndices[i] = 0;

            // создаём массив, в котором мы будем хранить индексы элементов последовательности,
            // инициализированный с -1
            int[] prevIndices = new int[n];
            for (int i = 0; i < n; i++)
                prevIndices[i] = -1;

            // это будет всегда указывать на пустую позицию
            int len = 1;
            for (int i = 1; i < n; i++)
            {
                if (arr[i] < arr[tailIndices[0]])
                    // новая меньшая величина
                    tailIndices[0] = i;
                else if (arr[i] >
                    arr[tailIndices[len - 1]])
                {
                    // arr[i] расширяет искомую подпоследовательность
                    prevIndices[i] = tailIndices[len - 1];
                    tailIndices[len++] = i;
                }
                else
                {
                    // запись элемента в формирующуюся искомую подпоследовательность
                    // arr[i] будет потенциальным кандидатом будущей подпоследовательности
                    // это заменит значение в tailIndices
                    int pos = GetCeilIndex(arr, tailIndices, -1, len - 1, arr[i]);
                    if (pos > 0)
                    {
                        prevIndices[i] = tailIndices[pos - 1];
                        tailIndices[pos] = i;
                    }
                }
            }
            // вывод конечного массива в порядке возрастания
            int[] mass = new int[len];
            int len2 = len;
            for (int i = tailIndices[len - 1]; i >= 0;
            i = prevIndices[i])
            {
                len2--;
                for (int k = len2; k >= 0; k--)
                    mass[k] = arr[i];
            }
            Console.WriteLine("LIS на основе входных данных: ");
            for (int i = 0; i < len; i++)
                Console.Write(mass[i] + " ");
            Console.WriteLine();

            return len;
        }

        // обработка ввода
        public static void Main()
        {
            string[] input;
            // объявление массива целых чисел (по умолчанию задан такой массив)               
            int[] nums = null;

            bool exeptionCatched = false;
            // цикл проверки корректности ввода команд
            while (true)
            {
                Console.Write("> ");

                // увеличение буфера для преодоления ограничения на ввод символов
                var bufsize = 8192;
                Stream stream = Console.OpenStandardInput(bufsize);
                TextReader inReader = (stream == Stream.Null) ?
                StreamReader.Null : TextReader.Synchronized(new StreamReader(stream, Console.InputEncoding, false, bufsize, true));
                Console.SetIn(inReader);

                // ввод и чтение команды (пропуская пустые символы)
                input = Console.ReadLine().Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                // проверка, если введено более одного числа
                if (input.Length >= 2)
                {
                    // изменение размера массива в зависимости от количества введенных значений
                    Array.Resize(ref nums, input.Length);

                    //заполнение массива введенными значениями
                    for (int k = 0; k < input.Length; k++)
                    {
                        try
                        {
                            nums[k] = Convert.ToInt32(input[k]);
                        }
                        // вывод сообщения об ошибке, если вместо чисел целого типа были введены вещественные числа, пустая строка, буквы или любые другие символы
                        catch (FormatException)
                        {
                            Console.WriteLine("\nНеверный формат ввода. Введите число целого типа.\nЭлемент, в котром обнаружена ошибка: " + input[k] + "\n");
                            Console.ReadKey();
                            exeptionCatched = true;
                        }
                        //вывод сообщения об ошибке, если были введены числа, которые не входят в диапозон от -2 147 483 648 до 2 147 483 647
                        catch (OverflowException)
                        {
                            Console.Write("\nДанное число не входит в диапазон допустимых значений.\nЭлемент, в котром обнаружена ошибка: " + input[k] + "\n");
                            Console.ReadKey();
                            exeptionCatched = true;
                        }
                    }
                    // вывод наибольшей возрастающей последовательности
                    if (!exeptionCatched)
                    {
                        Console.Write("Размер LIS: " + LongestIncreasingSubsequence(nums, nums.Length) + "\n");
                        Console.ReadKey();
                    }
                    exeptionCatched = false;
                }
            }
        }
    }
}
// 54564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 -455 4545 45 545 454 54 545 454 5 212 12 145 45 -47 8  545 -451 2124 545 -45  -2512 4545 -125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 -545 -454 54 -545 454 5 212 12 -145 45 47 8  -545 451 2124 -545 -45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 054564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 0 54564 645465 65465454 46545454 654546 454564564 5465454 54564 5454 5454555 4545 445 455 4545 45 545 454 54 545 454 5 212 12 145 45 47 8  545 451 2124 545 45  2512 4545 125454 51 2 45454 51 2 1545 4 12 4545 4 5 2 1545 45 4 124 54545 45  124 5 45 412 454 54 2 1 54 5421 2 4512 1 545 41 0
